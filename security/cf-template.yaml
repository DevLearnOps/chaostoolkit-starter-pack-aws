AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates the cloud infrastructure with ALB and ECS Service

Parameters:
  Program:
    Type: String
    Default: Chaos
    Description: The name of the implementation program

  TemplatesBucketSuffix:
    Type: String
    Description: What is the suffix of the S3 buckets containing cf-templates?
    Default: cf-templates

  VpcCidr:
    Type: String
    Default: "10.1.0.0/16"
    Description: What is the cidr block for the master VPC?
    AllowedPattern: ^([0-9]{1,3}\.){3}([0-9]{1,3})\/[0-9]{1,2}$

  NumberOfAZs:
    Type: Number
    Default: 2
    Description: How many AZs do you want to use (1-3) ?
    AllowedValues:
      - 1
      - 2
      - 3

  ApplicationName:
    Type: String
    Description: "The name of the application"
    Default: "nginx"

  Environment:
    Type: String
    Description: "The name of the environment"
    Default: "dev"

  RepositoryName:
    Type: String
    Description: "The name of the image repository"
    Default: "security/nginx"

  ApplicationPort:
    Type: Number
    Default: 80

  HealthCheckPath:
    Type: String
    Default: "/"

  Cpu:
    Type: Number
    Default: 256

  Memory:
    Type: Number
    Default: 512

  DesiredCount:
    Type: Number
    Default: 1

  S3ManagedPrefixList:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "The SSM parameter for the AWS managed S3 prefix list"
    Default: "/shared/vpc/s3-managed-prefix-list-id"

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${AWS::AccountId}-${TemplatesBucketSuffix}.s3.amazonaws.com/networking/vpc.yaml"
      Parameters:
        Name: !Ref Program
        VpcCidr: !Ref VpcCidr
        NumberOfAZs: !Ref NumberOfAZs
      TimeoutInMinutes: 10

  VPCEndpointSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "The security group for vpc endpoints"
      VpcId: !GetAtt VPC.Outputs.VpcId
      SecurityGroupIngress:
      - IpProtocol: 'tcp'
        FromPort: 443
        ToPort: 443
        Description: "Allow access from the VPC"
        CidrIp: !Ref VpcCidr

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: "Gateway"
      RouteTableIds: !Split [ ',', !GetAtt VPC.Outputs.PrivateRouteTables]
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !GetAtt VPC.Outputs.VpcId
  LogsApiEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !GetAtt VPC.Outputs.VpcId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecGroup
      SubnetIds: !Split [ ',', !GetAtt VPC.Outputs.PrivateSubnetIds]
  EcrApiEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !GetAtt VPC.Outputs.VpcId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecGroup
      SubnetIds: !Split [ ',', !GetAtt VPC.Outputs.PrivateSubnetIds]
  EcrDkrEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !GetAtt VPC.Outputs.VpcId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecGroup
      SubnetIds: !Split [ ',', !GetAtt VPC.Outputs.PrivateSubnetIds]

  VpcIdSsmParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /devlearnops/vpc-id
      Type: "String"
      Value: !GetAtt VPC.Outputs.VpcId
      Description: "The ID of the vpc"
      Tags:
        Name: !Sub "${Program}-vpc-id"
        Description: "The ID of the vpc"
  PublicSubnetIdsSsmParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /devlearnops/public-subnet-ids
      Type: "String"
      Value: !GetAtt VPC.Outputs.PublicSubnetIds
      Description: "The ID of the public subnets in the vpc"
      Tags:
        Name: !Sub "${Program}-public-subnet-ids"
        Description: "The ID of the public subnets in the vpc"
  PrivateSubnetIdsSsmParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /devlearnops/private-subnet-ids
      Type: "String"
      Value: !GetAtt VPC.Outputs.PrivateSubnetIds
      Description: "The ID of the private subnets in the vpc"
      Tags:
        Name: !Sub "${Program}-private-subnet-ids"
        Description: "The ID of the private subnets in the vpc"

  DummyAlbSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "The dummy application load balancer to use for chaos attacks"
      VpcId: !GetAtt VPC.Outputs.VpcId
      SecurityGroupIngress:
      - IpProtocol: 'tcp'
        FromPort: 80
        ToPort: 80
        Description: Allow all addresses
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: -1
        ToPort: -1
        CidrIp: '0.0.0.0/0'
        Description: 'Outbound Traffic Rule'

  DummyAlbSecGroupSSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /chaos/alb/dummy-alb-secgroup
      Type: "String"
      Value: !Ref DummyAlbSecGroup
      Description: "The id of the dummy security group to use for security testing"
      Tags:
        Name: Program
        Description: !Ref Program

  ApplicationLoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "The security group to be used for the ALB"
      VpcId: !GetAtt VPC.Outputs.VpcId
      SecurityGroupIngress:
      - IpProtocol: 'tcp'
        FromPort: 80
        ToPort: 80
        Description: Allow all addresses
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: -1
        ToPort: -1
        CidrIp: '0.0.0.0/0'
        Description: 'Outbound Traffic Rule'

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application
      SecurityGroups:
      - !Ref ApplicationLoadBalancerSecGroup
      Subnets: !Split [ ',', !GetAtt VPC.Outputs.PublicSubnetIds]

  # Default Application
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ApplicationName}-cluster"

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref ApplicationPort
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: !Ref ApplicationPort
      Protocol: "HTTP"
      TargetType: "ip"
      VpcId: !GetAtt VPC.Outputs.VpcId

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Cpu: !Ref Cpu
          Memory: !Ref Memory
          Essential: "true"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}"
          PortMappings:
            - ContainerPort: !Ref ApplicationPort
              HostPort: !Ref ApplicationPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-create-group: "true"
              awslogs-group: !Sub "${Environment}"
              awslogs-stream-prefix: !Sub "${ApplicationName}"
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      Policies:
        - PolicyName: !Sub "${ApplicationName}-task-role-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: Allow
                Action: "*"
                Resource: "*"
              - 
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - "arn:aws:logs:*:*:*"
      Tags:
        - Key: Description
          Value: "The chaostoolkit dashboard task role"

  TaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: !Sub "${ApplicationName}-task-execution-role-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - "arn:aws:logs:*:*:*"
      Tags:
        - Key: Description
          Value: "The task execution role for chaostoolkit-dashboard-api"

  ServiceSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "The security group to be used for the service"
      VpcId: !GetAtt VPC.Outputs.VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: !Sub "Port ${ApplicationPort} Access"
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecGroup
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          #CidrIp: '0.0.0.0/0'
          CidrIp: !Ref VpcCidr
          Description: 'Outbound Traffic Rule'
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          DestinationPrefixListId: !Ref S3ManagedPrefixList

  Service:
    DependsOn: 
      - HttpListener
      - S3GatewayEndpoint
      - EcrApiEndpoint
      - EcrDkrEndpoint
      - LogsApiEndpoint
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      ServiceName: !Ref ApplicationName
      DesiredCount: !Ref DesiredCount
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Split [ ',', !GetAtt VPC.Outputs.PrivateSubnetIds]
          SecurityGroups:
            - !Ref ServiceSecGroup
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: !Ref ApplicationPort
          TargetGroupArn: !Ref TargetGroup
