title: Service should scale-out resources in the agreed-upon amount of time
description: |
  This experiment validates the service can scale-out containers quickly when
  additional capacity is required to handle increased load on the application.
  To simulate production-like conditions we use Grafana k6 to generate synthetic
  user load and then ask the service to spawn up additional containers.

contributions:
  security: "low"
  reliability: "medium"
  scalability: "high"

configuration:
  stress_duration: "5m"
  stress_users: "20"
  script_file: "../../load-generation/comments-k6/journey_prod.js"
  cluster_name: "live-comments-full-cluster"
  service_name: "comments-api-service"
  acceptable_scaling_time: 240
  desired_tasks_count: 3
  application_url:
    type: probe
    provider:
      type: python
      module: devlearnops.aws.ssm.probes
      func: get_parameter
      arguments:
        name: "/app/comments/live/web_url"

steady-state-hypothesis:
  title: "service-is-stable"
  probes:
    - type: probe
      name: "site-responsive"
      tolerance: true
      provider:
        func: http
        module: chaosgrafana.k6.probes
        type: python
        arguments:
          endpoint: ${application_url}/users
          method: GET
          timeout: 5
          duration: 10s
          vus: 2
    - name: "desired-equals-running"
      type: probe
      tolerance: true
      provider:
        type: python
        module: chaosaws.ecs.probes
        func: are_all_desired_tasks_running
        arguments:
          cluster: ${cluster_name}
          service: ${service_name}

method:
  - type: action
    name: "apply-test-load"
    background: true
    provider:
      func: run_script
      module: chaosgrafana.k6.actions
      type: python
      arguments:
        script_path: ${script_file}
        vus: ${stress_users}
        duration: ${stress_duration}
        environ:
          COMMENTS_URL: "${application_url}"

  - name: "update-desired-count"
    type: action
    provider:
      type: python
      module: chaosaws.ecs.actions
      func: update_desired_count
      arguments:
        cluster: ${cluster_name}
        service: ${service_name}
        desired_count: ${desired_tasks_count}
    pauses:
      after: ${acceptable_scaling_time}
