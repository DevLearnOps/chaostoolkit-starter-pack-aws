title: When ECS service reaches maximum container count, operations should be notified
description: |-
  Autoscaling Constraints, this experiment verifies the behavior of the autoscaling system
  when it reaches the upper limit for container count on the specified service.
  The template uses `chaostoolkit-terraform` to temporarily register an AWS Cloudwatch alarm
  before the experiment and verifies the alarm notification is triggered and received by the
  SQS queue within 5 minutes.

contributions:
  security: "none"
  reliability: "medium"
  scalability: "high"

configuration:
  max_desired_count: 4
  original_desired_count: 2
  cluster_name: "live-chaos-comment-cluster"
  service_name: "comments-api-service"
  application_url:
    type: probe
    provider:
      type: python
      module: devlearnops.aws.ssm.probes
      func: get_parameter
      arguments:
        name: "/live/app/comments/web_url"

controls:
  - name: "configure-alarm-with-terraform"
    provider:
      type: python
      module: chaosterraform.control
      arguments:
        silent: true
        retain: false
        variables:
          cluster_name:
            name: cluster_name
          service_name:
            name: service_name
          max_container_count:
            name: max_desired_count

steady-state-hypothesis:
  title: "Verify web server is available"
  probes:
    - type: probe
      name: "site-responsive"
      tolerance: true
      provider:
        func: http
        module: chaosgrafana.k6.probes
        type: python
        arguments:
          endpoint: ${application_url}/users
          method: GET
          timeout: 5
          duration: 10s
          vus: 2
    - type: probe
      name: "wait-for-max-container-notification"
      tolerance:
        type: regex
        pattern: "ALARM"
        target: "NewStateValue"
      provider:
        type: python
        module: devlearnops.aws.sqs.probes
        func: wait_for_alarm_notification
        arguments:
          queue_url: ${tf_out__queue_url}
          topic_arn: ${tf_out__topic_arn}
          alarm_name: ${tf_out__alarm_name}
          timeout: 300
          consume_message: true
method:
  - type: action
    name: set-desired-to-max
    provider:
      type: python
      module: chaosaws.ecs.actions
      func: update_desired_count
      arguments:
        cluster: ${cluster_name}
        service: ${service_name}
        desired_count: ${max_desired_count}

rollbacks:
  - type: action
    name: reset-desired-count
    provider:
      type: python
      module: chaosaws.ecs.actions
      func: update_desired_count
      arguments:
        cluster: ${cluster_name}
        service: ${service_name}
        desired_count: ${original_desired_count}
