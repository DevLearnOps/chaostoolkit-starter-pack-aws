AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a VPC with public routing

Parameters:
  Name:
    Type: String
    Description: The name of the VPC stack
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: What is the cidr block for the master VPC?
    AllowedPattern: ^([0-9]{1,3}\.){3}([0-9]{1,3})\/[0-9]{1,2}$
  NumberOfAZs:
    Type: Number
    Default: 1
    Description: How many AZs do you want to utilize (1-3) ?
    AllowedValues:
      - 1
      - 2
      - 3

Conditions:
  BuildB: !Not [!Equals [!Ref NumberOfAZs, 1]]
  BuildC: !Equals [!Ref NumberOfAZs, 3]

Resources:
  MasterVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Name

  MasterInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: keyname
          Value: value
  MasterInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MasterVpc
      InternetGatewayId: !Ref MasterInternetGateway

  MasterInternetRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MasterVpc
      Tags:
        - Key: Name
          Value: Master-Internet-RT
  MasterInternetRoute:
    DependsOn: MasterInternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MasterInternetRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MasterInternetGateway

  NatGatewayAEIP:
    DependsOn: MasterInternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayBEIP:
    DependsOn: MasterInternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Condition: BuildB
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MasterVpc
  DefaultPublicRoute:
    DependsOn: MasterInternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MasterInternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildB
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref MasterVpc
      CidrBlock: !Select [4, !Cidr [!GetAtt MasterVpc.CidrBlock, 5, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public-subnet-a"
  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildB
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref MasterVpc
      CidrBlock: !Select [5, !Cidr [!GetAtt MasterVpc.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public-subnet-b"
  
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MasterVpc
  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableA
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref MasterVpc
      CidrBlock: !Select [1, !Cidr [!GetAtt MasterVpc.CidrBlock, 2, 8]]
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-subnet-a"
  
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Condition: BuildB
    Properties:
      VpcId: !Ref MasterVpc
  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Condition: BuildB
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      # THIS DESIGN IS INTENTIONAL:
      # By relying only on NatGatewayA for internet connectivity we are introducing
      # a single point of failure that we want to unearth with Chaos Experiments
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableB
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildB
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildB
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref MasterVpc
      CidrBlock: !Select [2, !Cidr [!GetAtt MasterVpc.CidrBlock, 3, 8]]
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-subnet-b"

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Condition: BuildC
    Properties:
      VpcId: !Ref MasterVpc
  DefaultPrivateRouteC:
    Type: AWS::EC2::Route
    Condition: BuildC
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      # THIS DESIGN IS INTENTIONAL:
      # By relying only on NatGatewayA for internet connectivity we are introducing
      # a single point of failure that we want to unearth with Chaos Experiments
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableC
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildC
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildC
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref MasterVpc
      CidrBlock: !Select [3, !Cidr [!GetAtt MasterVpc.CidrBlock, 4, 8]]
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-subnet-c"

Outputs:
  VpcId:
    Description: The Vpc ID
    Value: !Ref MasterVpc
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  PublicSubnetIds:
    Description: All public subnet ids
    Value: !Join
      - ","
      - Fn::If:
        - BuildB
        - - !Ref PublicSubnetA
          - !Ref PublicSubnetB
        - - !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetIds"

  PrivateSubnetIds:
    Description: The full list of subnet ids
    Value: !Join
      - ","
      - Fn::If:
        - BuildC
        - - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
        - !If
          - BuildB
          - - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          - - !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetIds

  PublicRouteTables:
    Description: The list of public route tables
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PUBLIC-RT"

  PrivateRouteTables:
    Description: The list of private route tables
    Value: !Join
      - ","
      - Fn::If:
        - BuildC
        - - !Ref PrivateRouteTableA
          - !Ref PrivateRouteTableB
          - !Ref PrivateRouteTableC
        - !If
          - BuildB
          - - !Ref PrivateRouteTableA
            - !Ref PrivateRouteTableB
          - - !Ref PrivateRouteTableA
    Export:
      Name: !Sub "${AWS::StackName}-PRIVATE-RT"
