title: ECS service scaling policies should scale in resources for cost optimization
description: |-
  Autoscaling tuning, this experiment verifies the configured autoscaling policies for the
  target service can scale-in tasks within a certain time frame in order to optimize resource
  utilisation. We start by updating the desired container count for the service to its maximum
  allowed, then wait for the policies to downscale back to the original value within a certain
  time.

contributions:
  security: "none"
  reliability: "none"
  scalability: "high"

########################################################
#  Configuration
########################################################
configuration:
  environment: "live"
  max_desired_count: 4
  original_desired_count: 2
  cluster_name: "live-chaos-comment-cluster"
  service_name: "comments-api-service"
  application_url:
    type: probe
    provider:
      type: python
      module: devlearnops.aws.ssm.probes
      func: get_parameter
      arguments:
        name: "/${environment}/app/comments/web_url"

########################################################
#  Hypothesis
########################################################
steady-state-hypothesis:
  title: "Verify web server is available"
  probes:
    - type: probe
      name: "site-responsive"
      tolerance: true
      provider:
        func: http
        module: chaosgrafana.k6.probes
        type: python
        arguments:
          endpoint: ${application_url}/users
          method: GET
          timeout: 5
          duration: 10s
          vus: 2
    - name: "autoscaling-should-set-min-container-count"
      type: probe
      tolerance: true
      provider:
        type: python
        module: devlearnops.aws.ecs.probes
        func: wait_for_service_attribute
        arguments:
          cluster: ${cluster_name}
          service: ${service_name}
          attribute: "desiredCount"
          expected: ${original_desired_count}
          timeout: 900 # 15 minutes

########################################################
#  Method
########################################################
method:
  - type: action
    name: set-desired-to-max
    provider:
      type: python
      module: chaosaws.ecs.actions
      func: update_desired_count
      arguments:
        cluster: ${cluster_name}
        service: ${service_name}
        desired_count: ${max_desired_count}
